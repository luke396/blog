<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhengbo Wang Blog</title>
    <link>https://luke396.github.io/blog/</link>
    <description>Recent content on Zhengbo Wang Blog</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Feb 2025 20:54:17 +0800</lastBuildDate>
    <atom:link href="https://luke396.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chatdoc Day1</title>
      <link>https://luke396.github.io/blog/posts/chatdoc-day1/</link>
      <pubDate>Tue, 04 Feb 2025 20:54:17 +0800</pubDate>
      <guid>https://luke396.github.io/blog/posts/chatdoc-day1/</guid>
      <description>&lt;blockquote&gt;&#xA;&lt;p&gt;本来的计划，是与类似 OpenWebUI 等网页对话 + Copilot 进行合作，通过网页对话制定计划，再阅读框架和文档去实现具体代码。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;现在可能与计划有些出入，因为 &lt;a href=&#34;https://github.com/cline/cline&#34;&gt;Cline&lt;/a&gt; 的出现，虽然我仍然对于让 LLM coding agent 完全写出代码抱有怀疑，但从它写的 demo 入手，或许是个更 &amp;ldquo;AI 时代 &amp;quot; 的选择&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;h2 id=&#34;cline&#34;&gt;Cline&lt;/h2&gt;&#xA;&lt;p&gt;首先是 Cline 的设置，由于 Deepseek 无论是硅基流动的，还是官方的 API 都不是很稳定，可以利用 Copilot 的 claude-3-5。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;这里的担忧是，会不会过分地请求 Copilot 导致被 GitHub 警告，因为这个问题曾经在 &lt;a href=&#34;https://github.com/yetone/avante.nvim&#34;&gt;avanate-nvim&lt;/a&gt; 中出现。我记不清在具体什么位置，看到了一个大概 1M/hour 的限制。&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;接着稍微读了一下 Cline 的文档，觉得最重要的是设置 &lt;a href=&#34;https://docs.cline.bot/improving-your-prompting-skills/custom-instructions-library/cline-memory-bank&#34;&gt;memory bank&lt;/a&gt;，就是利用 &lt;code&gt;cline_docs/&lt;/code&gt; 下的一系列文件和 &lt;a href=&#34;https://docs.cline.bot/improving-your-prompting-skills/custom-instructions-library/cline-memory-bank#id-4.-custom-instructions&#34;&gt;自定义的 prompt&lt;/a&gt; 让 Cline 可以跟踪项目的进度，并更新。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;我把这个 memory 排除在了 git 之外，总归还是有点私密的&lt;/p&gt;&lt;/blockquote&gt;&#xA;&lt;p&gt;&lt;strong&gt;有一点疑问就是，这些 memory 的最佳实践，是否需要手动更改，还是更推荐让 Cline 全程自助处理。&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;另一个，应该可能有所发挥，但我目前还没找到合适场景的，是 &lt;code&gt;.clinerules&lt;/code&gt;，类似 cursor 的配置文件，也提供了 &lt;a href=&#34;https://docs.cline.bot/getting-started/getting-started-new-coders/our-favorite-tech-stack#clinerules-template&#34;&gt;模板&lt;/a&gt;，可能更具体的实践用法，还需要未来探索。&lt;/p&gt;&#xA;&lt;h2 id=&#34;项目详情&#34;&gt;项目详情&lt;/h2&gt;&#xA;&lt;p&gt;已经生成了 memory 和初步的框架，具体写在明天。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;虽然是懒惰的程度居多，但强行辩解就是，为了明天开始写 Day2 留一个开头，让这个工作流滚动起来。&lt;/p&gt;</description>
    </item>
    <item>
      <title>6.006 L01</title>
      <link>https://luke396.github.io/blog/posts/6.006-l01/</link>
      <pubDate>Thu, 09 Jan 2025 21:00:17 +0800</pubDate>
      <guid>https://luke396.github.io/blog/posts/6.006-l01/</guid>
      <description>&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Purpose of class&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这门课的目的在于，解决计算问题的同时，要去交流和证明解决办法是正确的、有效的&lt;/li&gt;&#xA;&lt;li&gt;包含解决问题，证明正确性，证明有效性，如何用通用术语进行交流&#xA;&lt;ul&gt;&#xA;&lt;li&gt;关于交流的提法，是第一次见到&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Definition of problem and algorithm&#xA;&lt;ul&gt;&#xA;&lt;li&gt;问题是有输入和输出的二元关系&#xA;&lt;ul&gt;&#xA;&lt;li&gt;不要试图去指定所有输入对应的结果，无数的可能是无法枚举的&lt;/li&gt;&#xA;&lt;li&gt;这门课通常在讨论一般性的，大数据量输入&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;算法，在定义的时候，提到了每个输入，都对应一个确定的输出&#xA;&lt;ul&gt;&#xA;&lt;li&gt;或许一个输入有很多正确结果，但是算法就应该类似函数那样，只返回一个&#xA;&lt;ul&gt;&#xA;&lt;li&gt;返回哪个显然与具体算法的过程有关&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;一个算法，可以被定义为解决问题，就是他能够对问题的每个输入都返回一个正确的输出&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;problem-solving-with-algorithms&#34;&gt;Problem Solving with Algorithms&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Examples of problems and corresponding algorithms&#xA;&lt;ul&gt;&#xA;&lt;li&gt;问题的例子是，班级里面，是否有生日相同的同学&lt;/li&gt;&#xA;&lt;li&gt;一个直观的简单算法就是，从一个空的数据开始，不断询问记录每个同学的生日，每当得到一个新的生日，就与已有的生日相互比较，如果相同，则返回当前同学与从数据中找到的另一位同学，否则将当前同学的生日记录，再重复过程。如果问遍了全部的同学，也没有得到相同的生日，就返回空集。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这个算法，或许计算机因为没有技术细节而无法理解，但是人类应该可以理解并翻译成计算机语言了&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Generalization to large input spaces&#xA;&lt;ul&gt;&#xA;&lt;li&gt;general 的含义可以进一步理解为，任意大的输入&lt;/li&gt;&#xA;&lt;li&gt;这门课讨论的算法，应该对任意大的输入都有效&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;correctness-of-algorithms&#34;&gt;Correctness of Algorithms&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Proving algorithm correctness using induction&#xA;&lt;ul&gt;&#xA;&lt;li&gt;对于小数量的输入，自然可以一一验证&lt;/li&gt;&#xA;&lt;li&gt;对于任意大小的输入，通常需要递归或者循环来解决问题&#xA;&lt;ul&gt;&#xA;&lt;li&gt;归纳法是证明其正确性的普遍方法&lt;/li&gt;&#xA;&lt;li&gt;不赘述归纳法细节，这里与数学上的归纳法基本一致，&#xA;从验证 $k=0$ 开始，假设 $k=k&amp;rsquo;$ 正确，验证 $k=k&amp;rsquo;+1$ 的正确性，进而令 $k\to \infty=n$，一般性得到证明&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;efficiency-of-algorithms&#34;&gt;&lt;strong&gt;Efficiency of Algorithms&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Importance of efficiency&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为了找到更优秀的算法，我们需要对算法运行时间/效率进行比较。&lt;/li&gt;&#xA;&lt;li&gt;同一个输入和算法，在不同配置的机器上的运行实际时间是不同的。为了得到任意情况下的，针对问题的高效率算法，显然比较绝对运行时间是不可行的&lt;/li&gt;&#xA;&lt;li&gt;所以，我们需要定义一种固定操作 - 这一操作的时间是一定的，然后计算不同算法下所需要不同操作数，作为算法所消耗时间的衡量&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Asymptotic Notation&#xA;&lt;ul&gt;&#xA;&lt;li&gt;为了表示不同算法的不同效率，引入渐进符号 - asymptotic notation&lt;/li&gt;&#xA;&lt;li&gt;上界 - $O(f(n))$，下界 - $\Omega(f(n))$，紧界 (tight bound) - $\Theta(f(n))$&#xA;&lt;ul&gt;&#xA;&lt;li&gt;思想在于忽略常数和低阶项的影响，只关注最主要的项，具体的定义略去&lt;/li&gt;&#xA;&lt;li&gt;上界在是实际中应用更加广泛，其余两个更多用在学术一些、专业一些的场合&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;有常数 $\Theta(1)$，对数 $\Theta(\log n)$，线性 $\Theta(n)$，对数线性 $\Theta(n\log n)$，&#xA;平方 $\Theta(n^{2})$，多项式 $\Theta(n^c)$，指数 $2^{\Theta(n^c)}$&lt;/li&gt;&#xA;&lt;li&gt;在 recitation 中有渐进的计算练习&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;model-of-computation&#34;&gt;&lt;strong&gt;Model of Computation&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Word-RAM model&#xA;&lt;ul&gt;&#xA;&lt;li&gt;这些主要是为了定义，$O(1)$ 常数复杂度的操作，有 整数运算 -integer arithmetic，逻辑运算 - logical operation，&#xA;字节运算 - bitwise arithmetic 以及读写给定地址的 word。这个理论复杂度，在实际中由于不同硬件等因素会在操作时间上有所区别。&lt;/li&gt;&#xA;&lt;li&gt;word 就是是处理器 (processor) 作为单个单元处理的固定大小 (w 个 bit) 的整数，从 ${0,1,\dots,2^w - 1}$，&#xA;例如在 32-bit 系统中就是 32 个 bit/4 个 byte 大小，w 就是 w-bit Word-RAM 的 word size&#xA;&lt;ul&gt;&#xA;&lt;li&gt;bit，就是 01；八个 bit 组成一个 byte，例如 01101000。&lt;/li&gt;&#xA;&lt;li&gt;为什么 word size 很重要，因为小的字长可能会限制性能，大的字长可以一次性处理更多的数据，&#xA;这也是 64 位系统相对于 32 位在内存寻址、数据处理等方面的进步。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;memory 是为 CPU 的操作提供数据的地方，通常指的是 RAM - Random Access Memory,&#xA;允许 CPU 快速的读取和写入数据，同时也储存 CPU 执行的指令&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内存中的每个 byte 都有一个唯一的 address，以便 CPU 快速定位&lt;/li&gt;&#xA;&lt;li&gt;在 32bit 系统中 address 的大小就是 32bit，那么也就可以有 $2^{32}$ (约 40 亿) 种地址表示。&#xA;注意到每个地址指向一个 byte，那么也就是说， 32bit 的系统的&#xA;总的可寻址空间 - addressable memory space 为 4GB - 40 亿个 byte。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;由于其他限制 (系统保留区域或其他架构限制)，这个理论最大值总几乎不可能达到的。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Basic operations and memory limits&#xA;&lt;ul&gt;&#xA;&lt;li&gt;输入大小为 $n$ 个 machine word，其应该小于 $2^w$，以保证其每个 word 的地址可以都放入内存中，&#xA;以 $O(1)$ 方式访问，即 $w&amp;gt;\log_{2}n$，其中 $\log_{2}n$ 为最大的地址&#xA;&lt;ul&gt;&#xA;&lt;li&gt;64bit 可寻址空间 $2^{64}$ 个 byte 目前看是足够大的，可以满足这个要求&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;data-structures&#34;&gt;&lt;strong&gt;Data Structures&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Definition and examples&#xA;&lt;ul&gt;&#xA;&lt;li&gt;数据结构，是储存非常量数据 (non-constant data) 的方式，同时支持一些列操作，这些操作的集合被称为接口 - interface&lt;/li&gt;&#xA;&lt;li&gt;non-constant / not static 的意思是数据可以被移动、添加和移除等，&#xA;数据结构提供提供了这种动态操作 (dynamic operation) 的能力&lt;/li&gt;&#xA;&lt;li&gt;很多数据结构都可以支持同一接口，但是具有不同的性能&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;Static Array example for birthday matching&#xA;&lt;ul&gt;&#xA;&lt;li&gt;静态数组 - 固定宽度和长度，静态队列接口；python 中的 tuple 是动态数组&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;StaticArray(n)&lt;/code&gt; - 初始化大小为 $n$ 的静态数组，每个元素都是 0 - $\Theta(n)$&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;StaticArray_get_at(i)&lt;/code&gt; - 返回指定位置 $i$ 的元素 - $\Theta(1)$&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;StaticArray_set_at(i,x)&lt;/code&gt; - 将 $x$ 写入位置 $i$- $\Theta(1)$&lt;/li&gt;&#xA;&lt;li&gt;之所以 &lt;code&gt;get&lt;/code&gt; 和 &lt;code&gt;set&lt;/code&gt; 方法是常数时间，是因为这个数组中的每个元素具有固定大小 - 一个 machine word&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;running-time-analysis&#34;&gt;&lt;strong&gt;Running Time Analysis&lt;/strong&gt;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Analyzing the birthday matching algorithm&#xA;&lt;ul&gt;&#xA;&lt;li&gt;recitation 上有详细的例子&lt;/li&gt;&#xA;&lt;li&gt;考虑循环为乘法的基本求和计算，来计算整个函数的运行时间 - running time，用 $O$ 表示上界&lt;/li&gt;&#xA;&lt;li&gt;可以通过，更换不同的数据结构来简化算法的时间复杂度&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
  </channel>
</rss>
